// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StageTest.Models;

#nullable disable

namespace ProjectB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230916231544_AddIsVerticalAlignToContainersVariablesType")]
    partial class AddIsVerticalAlignToContainersVariablesType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectB.Models.PrototypeModels.Prototype", b =>
                {
                    b.Property<Guid>("IdPrototype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("Date_")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ShortId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ShortID");

                    b.Property<TimeSpan?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPrototype")
                        .HasName("PK_Prototype");

                    b.ToTable("Prototypes");
                });

            modelBuilder.Entity("ProjectB.Models.PrototypeVersionModels.PrototypesVersion", b =>
                {
                    b.Property<Guid>("IdPrototypeVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("Date_")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdPrototype")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsBackend")
                        .HasColumnType("bit")
                        .HasColumnName("isBackend");

                    b.Property<bool?>("IsFrontend")
                        .HasColumnType("bit")
                        .HasColumnName("isFrontend");

                    b.Property<bool?>("IsLastVersion")
                        .HasColumnType("bit")
                        .HasColumnName("isLastVersion");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ShortID");

                    b.Property<TimeSpan?>("Time")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("IdPrototypeVersion")
                        .HasName("PK_Prototype__Versions");

                    b.HasIndex("IdPrototype");

                    b.ToTable("Prototypes__Versions", (string)null);
                });

            modelBuilder.Entity("StageTest.Models.ContainerLineFolder.ContainersLine", b =>
                {
                    b.Property<Guid>("IdContainerLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdContainer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.HasKey("IdContainerLine")
                        .HasName("PK_Prototype__Containers__Lines");

                    b.HasIndex("IdContainer");

                    b.ToTable("Containers__Lines", (string)null);
                });

            modelBuilder.Entity("StageTest.Models.ContainerModels.Container", b =>
                {
                    b.Property<Guid>("IdContainer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("IdContainerFolder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdFile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDynamicContent")
                        .HasColumnType("bit")
                        .HasColumnName("isDynamicContent");

                    b.Property<bool?>("IsDynamicFileName")
                        .HasColumnType("bit")
                        .HasColumnName("isDynamicFileName");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDynamic")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title__Dynamic");

                    b.HasKey("IdContainer")
                        .HasName("PK_Prototype__Containers");

                    b.HasIndex("IdContainerFolder");

                    b.HasIndex("IdParent");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("StageTest.Models.ContainersVariablesModels.ContainersVariable", b =>
                {
                    b.Property<Guid>("IdVariable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("IdContainer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdContainerFolder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdContainerLine")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdVariableType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDynamic")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title__Dynamic");

                    b.HasKey("IdVariable");

                    b.HasIndex("IdContainer");

                    b.HasIndex("IdContainerFolder");

                    b.HasIndex("IdContainerLine");

                    b.HasIndex("IdParent");

                    b.HasIndex("IdVariableType");

                    b.ToTable("Containers__Variables", (string)null);
                });

            modelBuilder.Entity("StageTest.Models.ContainersVariablesType", b =>
                {
                    b.Property<Guid>("IdVariableType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("isVerticalAlign")
                        .HasColumnType("bit");

                    b.HasKey("IdVariableType");

                    b.HasIndex("IdParent");

                    b.ToTable("Containers__Variables__Types", (string)null);
                });

            modelBuilder.Entity("StageTest.Models.FolderModels.ContainersFolder", b =>
                {
                    b.Property<Guid>("IdContainerFolder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("IdFolder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdParent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdPrototypeVersion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDynamicFolderName")
                        .HasColumnType("bit")
                        .HasColumnName("isDynamicFolderName");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleDynamic")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title__Dynamic");

                    b.HasKey("IdContainerFolder")
                        .HasName("PK_Prototype__Containers__Folders");

                    b.HasIndex("IdParent");

                    b.HasIndex("IdPrototypeVersion");

                    b.ToTable("Containers__Folders", (string)null);
                });

            modelBuilder.Entity("ProjectB.Models.PrototypeVersionModels.PrototypesVersion", b =>
                {
                    b.HasOne("ProjectB.Models.PrototypeModels.Prototype", "IdPrototypeNavigation")
                        .WithMany("PrototypesVersions")
                        .HasForeignKey("IdPrototype")
                        .HasConstraintName("FK_Prototype__Versions_Prototype");

                    b.Navigation("IdPrototypeNavigation");
                });

            modelBuilder.Entity("StageTest.Models.ContainerLineFolder.ContainersLine", b =>
                {
                    b.HasOne("StageTest.Models.ContainerModels.Container", "IdContainerNavigation")
                        .WithMany("ContainersLines")
                        .HasForeignKey("IdContainer")
                        .HasConstraintName("FK_Prototype__Containers__Lines_Prototype__Containers");

                    b.Navigation("IdContainerNavigation");
                });

            modelBuilder.Entity("StageTest.Models.ContainerModels.Container", b =>
                {
                    b.HasOne("StageTest.Models.FolderModels.ContainersFolder", "IdContainerFolderNavigation")
                        .WithMany("Containers")
                        .HasForeignKey("IdContainerFolder")
                        .HasConstraintName("FK_Prototype__Containers_Prototype__Containers__Folders");

                    b.HasOne("StageTest.Models.ContainerModels.Container", "IdParentNavigation")
                        .WithMany("InverseIdParentNavigation")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("FK_Prototype__Containers_Prototype__Containers");

                    b.Navigation("IdContainerFolderNavigation");

                    b.Navigation("IdParentNavigation");
                });

            modelBuilder.Entity("StageTest.Models.ContainersVariablesModels.ContainersVariable", b =>
                {
                    b.HasOne("StageTest.Models.ContainerModels.Container", "IdContainerNavigation")
                        .WithMany("ContainersVariables")
                        .HasForeignKey("IdContainer")
                        .HasConstraintName("FK_Containers__Variables_Containers");

                    b.HasOne("StageTest.Models.FolderModels.ContainersFolder", "IdContainerFolderNavigation")
                        .WithMany("ContainersVariables")
                        .HasForeignKey("IdContainerFolder")
                        .HasConstraintName("FK_Containers__Variables_Containers__Folders");

                    b.HasOne("StageTest.Models.ContainerLineFolder.ContainersLine", "IdContainerLineNavigation")
                        .WithMany("ContainersVariables")
                        .HasForeignKey("IdContainerLine")
                        .HasConstraintName("FK_Containers__Variables_Containers__Lines");

                    b.HasOne("StageTest.Models.ContainersVariablesModels.ContainersVariable", "IdParentNavigation")
                        .WithMany("InverseIdParentNavigation")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("FK_Containers__Variables_Containers__Variables");

                    b.HasOne("StageTest.Models.ContainersVariablesType", "IdVariableTypeNavigation")
                        .WithMany("ContainersVariables")
                        .HasForeignKey("IdVariableType")
                        .HasConstraintName("FK_Containers__Variables_Containers__Variables__Types");

                    b.Navigation("IdContainerFolderNavigation");

                    b.Navigation("IdContainerLineNavigation");

                    b.Navigation("IdContainerNavigation");

                    b.Navigation("IdParentNavigation");

                    b.Navigation("IdVariableTypeNavigation");
                });

            modelBuilder.Entity("StageTest.Models.ContainersVariablesType", b =>
                {
                    b.HasOne("StageTest.Models.ContainersVariablesType", "IdParentNavigation")
                        .WithMany("InverseIdParentNavigation")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("FK_Containers__Variables__Types_Containers__Variables__Types");

                    b.Navigation("IdParentNavigation");
                });

            modelBuilder.Entity("StageTest.Models.FolderModels.ContainersFolder", b =>
                {
                    b.HasOne("StageTest.Models.FolderModels.ContainersFolder", "IdParentNavigation")
                        .WithMany("InverseIdParentNavigation")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("FK_Containers__Folders_Containers__Folders");

                    b.HasOne("ProjectB.Models.PrototypeVersionModels.PrototypesVersion", "IdPrototypeVersionNavigation")
                        .WithMany("ContainersFolders")
                        .HasForeignKey("IdPrototypeVersion")
                        .HasConstraintName("FK_Containers__Folders_Prototypes__Versions");

                    b.Navigation("IdParentNavigation");

                    b.Navigation("IdPrototypeVersionNavigation");
                });

            modelBuilder.Entity("ProjectB.Models.PrototypeModels.Prototype", b =>
                {
                    b.Navigation("PrototypesVersions");
                });

            modelBuilder.Entity("ProjectB.Models.PrototypeVersionModels.PrototypesVersion", b =>
                {
                    b.Navigation("ContainersFolders");
                });

            modelBuilder.Entity("StageTest.Models.ContainerLineFolder.ContainersLine", b =>
                {
                    b.Navigation("ContainersVariables");
                });

            modelBuilder.Entity("StageTest.Models.ContainerModels.Container", b =>
                {
                    b.Navigation("ContainersLines");

                    b.Navigation("ContainersVariables");

                    b.Navigation("InverseIdParentNavigation");
                });

            modelBuilder.Entity("StageTest.Models.ContainersVariablesModels.ContainersVariable", b =>
                {
                    b.Navigation("InverseIdParentNavigation");
                });

            modelBuilder.Entity("StageTest.Models.ContainersVariablesType", b =>
                {
                    b.Navigation("ContainersVariables");

                    b.Navigation("InverseIdParentNavigation");
                });

            modelBuilder.Entity("StageTest.Models.FolderModels.ContainersFolder", b =>
                {
                    b.Navigation("Containers");

                    b.Navigation("ContainersVariables");

                    b.Navigation("InverseIdParentNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
